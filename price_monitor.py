# price_monitor.py
import os
import json
import time
import logging
import logging.handlers
from datetime import datetime
from typing import Dict, Any

import requests
from telegram.ext import Updater
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class PriceMonitor:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'token': os.getenv('TELEGRAM_BOT_TOKEN'),
            'chat_id': os.getenv('TELEGRAM_CHAT_ID'),
            'price_threshold': float(os.getenv('PRICE_CHANGE_THRESHOLD', 5)),
            'mcap_threshold': float(os.getenv('MCAP_CHANGE_THRESHOLD', 5)),
            'check_interval': int(os.getenv('CHECK_INTERVAL', 300)),
            'token_address': '0x96db3e22fdac25c0dff1cab92ae41a697406db7d',
            'network': 'SHAPE_MAINNET',
            'data_file': 'data.json',
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Updater(token=self.config['token']).bot
        
        self.logger.info("Price monitor initialized with config: %s", 
                        {k: v for k, v in self.config.items() if k != 'token'})

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        self.logger = logging.getLogger('PriceMonitor')
        self.logger.setLevel(logging.INFO)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('logs', exist_ok=True)

        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        handler = logging.handlers.TimedRotatingFileHandler(
            'logs/price_monitor.log',
            when='midnight',
            interval=1,
            backupCount=14,
            encoding='utf-8'
        )
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        self.logger.addHandler(handler)
        self.logger.addHandler(console_handler)

    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(self.config['data_file'], 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            self.logger.info("No previous data found, starting fresh")
            return {
                'price': 0,
                'market_cap': 0,
                'last_notification_price': 0,
                'last_notification_market_cap': 0
            }

    def save_data(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config['data_file'], 'w') as f:
                json.dump(data, f, indent=2)
            self.logger.info("Data saved successfully")
        except Exception as e:
            self.logger.error("Error saving data: %s", e)

    def fetch_token_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ GraphQL API"""
        try:
            response = requests.post(
                "https://zapper.xyz/z/graphql",
                headers={
                    "content-type": "application/json",
                    "apollographql-client-name": "web-relay"
                },
                json={
                    "query": """
                        query TokenPrice($address: Address!, $network: Network!) {
                            fungibleToken(address: $address, network: $network) {
                                symbol
                                name
                                onchainMarketData {
                                    price
                                    marketCap
                                }
                            }
                        }
                    """,
                    "variables": {
                        "address": self.config['token_address'],
                        "network": self.config['network']
                    }
                }
            )
            response.raise_for_status()
            return response.json()['data']['fungibleToken']
        except Exception as e:
            self.logger.error("Error fetching token data: %s", e)
            raise

    def calculate_percentage_change(self, current: float, previous: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        return 0 if previous == 0 else ((current - previous) / previous) * 100

    def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            self.bot.send_message(
                chat_id=self.config['chat_id'],
                text=message,
                parse_mode='HTML'
            )
            self.logger.info("Notification sent: %s", message)
        except Exception as e:
            self.logger.error("Error sending notification: %s", e)

    def check_price_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –∏ market cap"""
        try:
            previous_data = self.load_data()
            token_data = self.fetch_token_data()
            
            current_price = token_data['onchainMarketData']['price']
            current_market_cap = token_data['onchainMarketData']['marketCap']

            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            price_change = self.calculate_percentage_change(
                current_price,
                previous_data['last_notification_price'] or current_price
            )
            
            mcap_change = self.calculate_percentage_change(
                current_market_cap,
                previous_data['last_notification_market_cap'] or current_market_cap
            )

            self.logger.info(
                "Current check - Symbol: %s, Price: %s, Market Cap: %s, "
                "Price Change: %s%%, Market Cap Change: %s%%",
                token_data['symbol'], current_price, current_market_cap,
                price_change, mcap_change
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            should_notify = False
            notification_message = f"<b>{token_data['name']} ({token_data['symbol']}) Update</b>\n\n"

            if abs(price_change) >= self.config['price_threshold']:
                should_notify = True
                notification_message += f"üí∞ Price: ${current_price:.8f}\n"
                notification_message += f"üìà Price Change: {price_change:.2f}%\n"

            if abs(mcap_change) >= self.config['mcap_threshold']:
                should_notify = True
                notification_message += f"üè¶ Market Cap: ${current_market_cap:.2f}\n"
                notification_message += f"üìä Market Cap Change: {mcap_change:.2f}%\n"

            if should_notify:
                self.send_notification(notification_message)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
                self.save_data({
                    'price': current_price,
                    'market_cap': current_market_cap,
                    'last_notification_price': current_price,
                    'last_notification_market_cap': current_market_cap,
                    'last_update': datetime.now().isoformat()
                })
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –æ—Ç—Å—á–µ—Ç–∞
                self.save_data({
                    **previous_data,
                    'price': current_price,
                    'market_cap': current_market_cap,
                    'last_update': datetime.now().isoformat()
                })

        except Exception as e:
            self.logger.error("Error in check cycle: %s", e)
            raise

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.logger.info("Starting price monitor...")
        
        while True:
            try:
                self.check_price_changes()
                time.sleep(self.config['check_interval'])
            except Exception as e:
                self.logger.error("Error in main loop: %s", e)
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    monitor = PriceMonitor()
    monitor.run()
